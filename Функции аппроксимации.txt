/*===================================== GAUSS =====================================*/
double fx_GAUSS(double x, vector <double> &vParams)
{
	double y0 = vParams[0], xc = vParams[1], w = vParams[2], A = vParams[3];
	return y0 + (A / (w * sqrt(Pi / 2))) * exp(-2 * pow(((x - xc) / w), 2));
}

/*void grad_GAUSS(vector <double>& grad, double x, vector <double>& vParams, vector <bool>& vFixed)
{
	int i, j = 0;
	for (i = 0; i < vFixed.size(); i++)
	{
		if (vFixed[i] == false)
		{
			switch (i)
			{
			case 0:
				grad[j] = 1;
			case 1:
				grad[j] = -(2 * sqrt(2) * vParams[3] * exp(-(2 * pow(x - vParams[1], 2)) / pow(vParams[2], 2)) * (2 * x - 2 * vParams[1])) / (sqrt(Pi) * pow(vParams[2], 3));
			case 2:
				grad[j] = (4 * sqrt(2) * vParams[3] * exp(-(2 * pow(x - vParams[1], 2)) / pow(vParams[2], 2)) * pow(x - vParams[1], 2)) / (sqrt(Pi) * pow(vParams[2], 4)) -
					(sqrt(2) * vParams[3] * exp(-(2 * pow(x - vParams[1], 2)) / pow(vParams[2], 2))) / (sqrt(Pi) * pow(vParams[2], 2));
			case 3:
				grad[j] = (sqrt(2) * exp(-(2 * pow(x - vParams[1], 2)) / pow(vParams[2], 2))) / (sqrt(Pi) * vParams[2]);
			}
			j++;
		}
	}
}

double dfxdx_GAUSS(double x, double xc, double w, double A)
{
	return -(2 * sqrt(2) * A * exp(-(2 * pow(x - xc, 2)) / pow(w, 2)) * (2 * x - 2 * xc)) / (sqrt(Pi) * pow(w, 3));
}

double dfxdy0_GAUSS()
{
	return 1;
}

double dfxdxc_GAUSS(double x, double xc, double w, double A)
{
	return -(2 * sqrt(2) * A * exp(-(2 * pow(x - xc, 2)) / pow(w, 2)) * (2 * x - 2 * xc)) / (sqrt(Pi) * pow(w, 3));
}

double dfxdw_GAUSS(double x, double xc, double w, double A)
{
	return (4 * sqrt(2) * A * exp(-(2 * pow(x - xc, 2)) / pow(w, 2)) * pow(x - xc, 2)) / (sqrt(Pi) * pow(w, 4)) - 
		(sqrt(2) * A * exp(-(2 * pow(x - xc, 2)) / pow(w, 2))) / (sqrt(Pi) * pow(w, 2));
}

double dfxdA_GAUSS(double x, double xc, double w)
{
	return (sqrt(2) * exp(-(2 * pow(x - xc, 2)) / pow(w, 2))) / (sqrt(Pi) * w);
}*/
/*===================================== GAUSS =====================================*/

/*===================================== STEP =====================================*/
double fx_STEP(double x, vector <double> &vParams)
{
	double A = vParams[0], B = vParams[1], C = vParams[2], D = vParams[3];
	return A + B * x + C * exp(x / D);
}

/*void grad_STEP(vector <double>& grad, double x, vector <double>& vParams, vector <bool>& vFixed)
{
	int i, j = 0;
	for (i = 0; i < vFixed.size(); i++)
	{
		if (vFixed[i] == false)
		{
			switch (i)
			{
			case 0:
				grad[j] = 1;
			case 1:
				grad[j] = x;
			case 2:
				grad[j] = exp(x / vParams[3]);
			case 3:
				grad[j] = -(vParams[2] * x * exp(x / vParams[3])) / (vParams[3] * vParams[3]);
			}
			j++;
		}
	}
}

double dfxdx_STEP(double x, double B, double C, double D)
{
	return B + (C * exp(x / D)) / D;
}

double dfxdA_STEP()
{
	return 1;
}

double dfxdB_STEP(double x)
{
	return x;
}

double dfxdC_STEP(double x, double D)
{
	return exp(x / D);
}

double dfxdD_STEP(double x, double C, double D)
{
	return -(C * x * exp(x / D)) / (D * D);
}*/
/*===================================== STEP =====================================*/